/* Generated by Together */
package net.vicp.madz.infra.messaging.core;

import java.io.Serializable;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.MessageProducer;
import javax.jms.ObjectMessage;
import javax.jms.Session;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import net.vicp.madz.infra.messaging.core.model.MessageType;

public class MessageConnectivity {

	private ConnectionFactory connFactory;
	private Connection conn;
	private Destination dest;
	private Session session;
	private MessageProducer produer;
	private String connFactoryJNDIName;
	private String destinationJNDIName;
	private Properties envProperties;
	private String username;
	private String password;
	private MessageType messageType;

	public MessageConnectivity(String connFactoryJNDIName, String destinationJNDIName) {
		this.connFactoryJNDIName = connFactoryJNDIName;
		this.destinationJNDIName = destinationJNDIName;
		init();
	}

	void close() {
		try {
			produer.close();

		} catch (JMSException ex) {
			Logger.getLogger(MessageConnectivity.class.getName()).log(Level.SEVERE, null, ex);
		} finally {
			try {
				session.close();
			} catch (JMSException ex) {
				Logger.getLogger(MessageConnectivity.class.getName()).log(Level.SEVERE, null, ex);
			} finally {
				try {
					conn.close();

				} catch (JMSException ex) {
					Logger.getLogger(MessageConnectivity.class.getName()).log(Level.SEVERE, null, ex);
				} finally {
					produer = null;
					session = null;
					conn = null;
					connFactory = null;
				}
			}
		}
	}

	private void init() {
		try {
			InitialContext ic = null;

			if (envProperties == null) {
				ic = new InitialContext();
			} else {
				ic = new InitialContext(envProperties);
			}

			this.connFactory = (ConnectionFactory) ic.lookup(this.connFactoryJNDIName);
			if (username == null || password == null || username.trim().length() <= 0 || password.trim().length() <= 0) {
				this.conn = this.connFactory.createConnection();
			} else {
				this.conn = this.connFactory.createConnection(username, password);
			}
			this.session = this.conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
			this.dest = (Destination) ic.lookup(this.destinationJNDIName);
			this.produer = session.createProducer(dest);
		} catch (NamingException ex) {
			java.util.logging.Logger.getLogger(getClass().getName()).log(java.util.logging.Level.SEVERE, "exception caught", ex);
		} catch (JMSException ex) {
			java.util.logging.Logger.getLogger(getClass().getName()).log(java.util.logging.Level.SEVERE, "exception caught", ex);
		}
	}

	public MessageConnectivity(MessageConnectivityConfig config) {
		this.username = config.getUsername();
		this.password = config.getPassword();
		this.envProperties = config.getEnvProperties();
		this.connFactoryJNDIName = config.getConnectionFactoryJNDIName();
		this.destinationJNDIName = config.getDestinationJNDIName();
		this.messageType = config.getMessageType();
		init();
	}

	public void sendObjectMessage(Serializable object) throws JMSException {
		ObjectMessage objectMessage = this.session.createObjectMessage(object);
		System.out.println(objectMessage);
		this.produer.send(objectMessage);
	}

	public void sendDirectionalObjectMessage(Serializable object, Properties properties) throws JMSException {
		ObjectMessage objectMessage = null;
		objectMessage = this.session.createObjectMessage(object);
		if (properties != null) {
			Set<Entry<Object, Object>> entries = properties.entrySet();
			// System.out.println(getClass().getName() + ": get " +
			// entries.size() + " property");
			for (Entry entry : entries) {
				String key = (String) entry.getKey();
				String value = (String) entry.getValue();
				// System.out.println(getClass().getName() + ": property key:" +
				// key);
				objectMessage.setStringProperty(key, value);
			}
		}
		System.out.println(objectMessage);
		this.produer.send(objectMessage);
	}
}
