<?xml version="1.0" encoding="utf-8"?>
<framework:ManagedView xmlns:mx="http://www.adobe.com/2006/mxml"
					   xmlns:components="net.vicp.madz.components.*"
					   xmlns:framework="net.vicp.madz.framework.views.*"
					   width="100%" height="100%" creationComplete="init();" layout="vertical"
					   >
	<mx:Script>
		<![CDATA[
			import mx.collections.*;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.IFlexDisplayObject;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import net.vicp.madz.biz.common.vo.CategoryQTO;
			import net.vicp.madz.biz.common.vo.MerchandiseCTO;
			import net.vicp.madz.biz.common.vo.MerchandiseQTO;
			import net.vicp.madz.biz.common.vo.MerchandiseUTO;
			import net.vicp.madz.biz.common.vo.UnitOfMeasureQTO;
			import net.vicp.madz.components.events.ActionTableEvent;
			import net.vicp.madz.components.renderer.DateRendererFactory;
			
			//////////////////////////////////////////////////////
			////
			//// Fields 
			////
			//////////////////////////////////////////////////////
			private static const INVALID:int = -1;
			private static const QUREY:int = 0;
			private static const CREATE:int = 1;
			private static const UPDATE:int = 2;
			private static const DELETE:int = 3;
			
			private var queryForm:MerchandiseQueryDialog ;
            private var createForm:MerchandiseCreateDialog;
			
			[Bindable]
            public var merchandiseList:Array;
            [Bindable]
            private var merchandiseColumnProvider:Array;
            private var resultToken:AsyncToken;
            private var lastRPCType:int;
			//////////////////////////////////////////////////////
			////
			//// Methods 
			//// 
			//////////////////////////////////////////////////////
			
			//////////////////////////////////////////////////////
			//// Methods : initialize 
			//////////////////////////////////////////////////////
			private function init():void{
				initMerchandiseTable();
				initListeners();
			}
			
            private function initMerchandiseTable():void {
            	merchandiseColumnProvider = new Array();
            	
            	var col:DataGridColumn = null;
            	
            	col = new DataGridColumn("code");
            	col.headerText="商品编码";
            	col.width = 90;
            	col.dataField="code";
            	merchandiseColumnProvider.push(col);
            	
            	col = new DataGridColumn("name");
            	col.headerText="商品名称";
            	col.width = 90;
            	col.dataField="name";
            	merchandiseColumnProvider.push(col);
            	
            	col = new DataGridColumn("category");
            	col.headerText="商品分类";
            	col.width = 120;
            	col.dataField="category";
            	merchandiseColumnProvider.push(col);
            	
            	col = new DataGridColumn("suggestPrice");
            	col.headerText="建议价格";
            	col.width = 80;
            	col.dataField="suggestPrice";
            	col.setStyle("textAlign","right");
            	merchandiseColumnProvider.push(col);
          
				col = new DataGridColumn("unitOfMeasureName");
				col.headerText="计量单位";
				col.width = 80;
				col.dataField="unitOfMeasureName";
				col.setStyle("textAlign","left");
				merchandiseColumnProvider.push(col);
				
				
            	col = new DataGridColumn("description");
            	col.headerText="商品描述";
				col.width = 240;
            	col.dataField="description";
            	merchandiseColumnProvider.push(col);
				
				col = new DataGridColumn("updatedBy");
				col.headerText="更新者";
				col.dataField="updatedBy";
				col.editable = false;
				merchandiseColumnProvider.push(col); 
				
				col = new DataGridColumn("updatedOn");
				col.headerText="更新日期";
				col.dataField="updatedOn";
				col.editable = false;
				col.itemRenderer = new DateRendererFactory("updatedOn");
				merchandiseColumnProvider.push(col);             	
				
				col = new DataGridColumn("createdBy");
				col.headerText="创建者";
				col.dataField="createdBy";
				col.editable = false;
				merchandiseColumnProvider.push(col);             	
				
				col = new DataGridColumn("createdOn");
				col.headerText="创建日期";
				col.dataField="createdOn";
				col.editable = false;
				col.itemRenderer = new DateRendererFactory("createdOn");
				merchandiseColumnProvider.push(col);       
				
            	merchandiseTable.columnProvider = merchandiseColumnProvider;
            }

			
			private function initListeners():void {
				merchandiseTable.addEventListener(ListEvent.ITEM_CLICK,onItemSelected);
				//For Query
            	merchandiseTable.addEventListener(ActionTableEvent.REQUEST_DATA_QUERY,popupQueryView);
            	merchandiseTable.addEventListener(ActionTableEvent.SUBMIT_QUERY_CONDITION,executeQuery);
            	//For Modify
            	merchandiseTable.addEventListener(ActionTableEvent.REQUEST_DATA_MODIFY,popupModifyView);
            	merchandiseTable.addEventListener(ActionTableEvent.DATA_MODIFY_SUBMIT,executeUpdate);
            	//For Create
            	merchandiseTable.addEventListener(ActionTableEvent.DATA_CREATE,popupCreateView);
            	//For Delete
            	merchandiseTable.addEventListener(ActionTableEvent.DATA_DELETE,executeDelete);
				
				//For Create, Modify, Delete
				commonObject.addEventListener(FaultEvent.FAULT,onFault);
				commonObject.addEventListener(ResultEvent.RESULT,onSuccess);
				
				//For Query
				commonObjectQuery.addEventListener(ResultEvent.RESULT,onMerchandiseFetch);
            	commonObjectQuery.addEventListener(FaultEvent.FAULT,onMerchandiseFault);
            	
			}
			
			//////////////////////////////////////////////////////
			////
			//// Event Handlers
			//// 
			//////////////////////////////////////////////////////			
			private function onItemSelected(event:ListEvent):void{
				trace("Item Selected");
			}
			
			//////////////////////////////////////////////////////
			//// Event Handlers : Query Handlers
			//////////////////////////////////////////////////////		
            private function popupQueryView(event:ActionTableEvent):void{
            	if(queryForm == null){
					queryForm = new MerchandiseQueryDialog();
				}else{
					queryForm.reset();
				}
				PopUpManager.addPopUp(queryForm as IFlexDisplayObject, this as DisplayObject, true);
				PopUpManager.centerPopUp(queryForm);
				queryForm.queryButton.addEventListener(FlexEvent.BUTTON_DOWN,onQuery);
				queryForm.closeBtn.addEventListener(FlexEvent.BUTTON_DOWN,onQueryClose);
            }
            
            private function onQuery(event:FlexEvent):void {
            	var mqto:MerchandiseQTO = new MerchandiseQTO();
            	mqto.code = queryForm.merchandiseCodeInput.text;
            	mqto.name = queryForm.merchandiseNameInput.text;
            	if(queryForm.categoryIDCombox.labelField.toString() == "所有"){
            		mqto.category = "0";
            	}
            	else{
	            	mqto.category = "1";
	            	mqto.categoryName = queryForm.categoryIDCombox.selectedLabel.toString();
            	}
				merchandiseTable.submitQueryCondition(mqto);
            	
            }
            
            private function onQueryClose(event:FlexEvent):void {
            	PopUpManager.removePopUp(queryForm);
            }
            
            private function executeQuery(event:ActionTableEvent):void{
        		var condition:Object = event.getQueryCondition();
            	if(condition != null && condition is MerchandiseQTO){
            		commonObjectQuery.findMerchandiseByQTO(condition);
            	}else{
            		commonObjectQuery.findMerchandise();
            	}
            	PopUpManager.removePopUp(queryForm);
            }
            
			//////////////////////////////////////////////////////
			//// Event Handlers : Create Handlers
			//////////////////////////////////////////////////////	
            private function popupCreateView(event:ActionTableEvent):void{
            	if(createForm == null){
            		createForm = new MerchandiseCreateDialog();
            	}else{
            		createForm.reset();
            	}
            	PopUpManager.addPopUp(createForm as IFlexDisplayObject, this as DisplayObject, true);
				PopUpManager.centerPopUp(createForm);
				createForm.createButton.addEventListener(FlexEvent.BUTTON_DOWN,onCreate);
				createForm.closeBtn.addEventListener(FlexEvent.BUTTON_DOWN,onCreateClose);
            }
            
            private function onCreate(event:FlexEvent):void{
            	var newMerchandise:MerchandiseCTO = new MerchandiseCTO();
            	newMerchandise.code = createForm.codeInput.text;
            	newMerchandise.name = createForm.nameInput.text;
                newMerchandise.suggestPrice = Number(createForm.suggestPriceInput.text);
				if (createForm.categoryGroup.selectedValue == "强度等级") {
					newMerchandise.category = "CONCRETE";
				} else {
					newMerchandise.category = "ADDITIVE";
				}
//                newMerchandise.categoryId = (createForm.categoryCombox.selectedItem as CategoryQTO).id;
                //newMerchandise.categoryId = createForm.categoryCombox.selectedItem.id;
            	newMerchandise.description = createForm.descriptionTextArea.text;
            	newMerchandise.unitOfMeasureId = createForm.uomCombox.selectedItem.id;
				
            	resultToken = commonObject.createMerchandise(newMerchandise);
            	lastRPCType = CREATE;
            	if(createForm.closeCheckBox.selected){
            	    PopUpManager.removePopUp(createForm);
            	}
				createForm.reset();
            }
            
            private function onCreateClose(event:FlexEvent):void{
            	PopUpManager.removePopUp(createForm);
            }
            
			//////////////////////////////////////////////////////
			//// Event Handlers : Delete Handlers
			//////////////////////////////////////////////////////	
            private function executeDelete(event:ActionTableEvent):void{
            	trace(event.getDeletedData());
            	var merchandises:Array = event.getDeletedData();
            	if(merchandises == null || merchandises.length <= 0){
            		return;
            	}
            	var task:Array = new Array(merchandises.length);
            	for(var i:int = 0; i < merchandises.length; i ++){
            		task[i] = MerchandiseQTO(merchandises[i]).id;
            	}
            	resultToken = commonObject.removeMerchandise(task);
//            	testCommonObject.removeCategory(task);
            	lastRPCType = DELETE;
            }
            
			//////////////////////////////////////////////////////
			//// Event Handlers : Update Handlers
			//////////////////////////////////////////////////////	
			private function popupModifyView(event:ActionTableEvent):void {
				trace(event);
			}
			
			private function executeUpdate(event:ActionTableEvent):void {
				var modified:Array = event.getSubmitingData();
				if(!modified || modified.length <= 0){
					return;
				}
				var submitData:Array = new Array();
				for(var i:int = 0; i < modified.length; i ++){
					if(!modified[i]){
						continue;
					}
					var uto:MerchandiseUTO = new MerchandiseUTO();
					uto.id = MerchandiseQTO(modified[i]).id;
					uto.code = MerchandiseQTO(modified[i]).code;
					uto.name = MerchandiseQTO(modified[i]).name;
					uto.suggestPrice = MerchandiseQTO(modified[i]).suggestPrice;
					uto.description = MerchandiseQTO(modified[i]).description;
					uto.category = MerchandiseQTO(modified[i]).category;
					submitData[submitData.length] = uto;
				}
				resultToken = commonObject.updateMerchandise(submitData);
				lastRPCType = UPDATE;
			}
			
			//////////////////////////////////////////////////////
			//// Event Handlers : RPC Handlers
			//////////////////////////////////////////////////////	
			private function onFault(event:FaultEvent):void {
				trace(event);
				Alert.show(event.fault.faultString, "Error");
				initDataModel();
			}
			
			private function initDataModel():void {
            	commonObjectQuery.findMerchandise();
            }      
              
			private function onSuccess(event:ResultEvent):void {
				if((!resultToken)||(!resultToken.message)||(!resultToken.message.body)){
					return;
				}
				var body:Array = resultToken.message.body as Array;
				if(lastRPCType == CREATE){
					if(null != resultToken.result){
						resultToken = commonObjectQuery.findMerchandise(resultToken.result);
						lastRPCType = QUREY;
					} else {
						lastRPCType = INVALID;
					}
				} else {
					lastRPCType = INVALID;
				}
				lastRPCType = INVALID;
			}
			
			private function onMerchandiseFetch(event:ResultEvent):void{
				if (event.result is ArrayCollection) {
				    merchandiseList = ArrayCollection(event.result).toArray();
				    merchandiseTable.model = merchandiseList;
				} else  if (event.result is MerchandiseQTO) {
					merchandiseTable.submitCreateData(event.result);
				}
			}
			
			private function onMerchandiseFault(event:FaultEvent):void{
				Alert.show(event.fault.toString());
			}
			
			//////////////////////////////////////////////////////
			//// Methods : Override Methods
			//////////////////////////////////////////////////////	
            public override function reset():void{
            	merchandiseTable.reset();
            }            
		]]>
	</mx:Script>
	
	
	<mx:RemoteObject id="commonObjectQuery" destination="CommonObjectQuery"/>
	<mx:RemoteObject id="commonObject" destination="CommonObject"/>
	<mx:Panel width="100%" height="100%" fontSize="12" layout="vertical" title="产品视图">
		<components:ActionTable id="merchandiseTable"/>
  	</mx:Panel>
</framework:ManagedView>
