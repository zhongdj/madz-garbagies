<?xml version="1.0" encoding="utf-8"?>
<framework:ManagedView xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:components="net.vicp.madz.components.*"
					   xmlns:framework="net.vicp.madz.framework.views.*" layout="vertical" width="100%" height="100%"  creationComplete="init();">
	<mx:Script>
		<![CDATA[
			import mx.collections.*;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.IFlexDisplayObject;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import net.vicp.madz.admin.vo.MenuItemTO;
			import net.vicp.madz.components.events.ActionTableEvent;
			import net.vicp.madz.components.renderer.DateRendererFactory;
			
			//////////////////////////////////////////////////////
			////
			//// Fields 
			////
			//////////////////////////////////////////////////////
			private static const INVALID:int = -1;
			private static const QUERY:int = 0;
			private static const CREATE:int = 1;
			private static const UPDATE:int = 2;
			private static const DELETE:int = 3;
			
			private const createForm:MenuItemCreateDialog = new MenuItemCreateDialog();
			private const updateForm:MenuItemModifyDialog = new MenuItemModifyDialog();
			
			[Bindable]
			public var list:Array;
			
			[Bindable]
			private var columnProvider:Array;
			private var resultToken:AsyncToken;
			private var lastRPCType:int;
			
			//////////////////////////////////////////////////////
			////
			//// Methods 
			//// 
			//////////////////////////////////////////////////////
			
			//////////////////////////////////////////////////////
			//// Methods : initialize 
			//////////////////////////////////////////////////////
			private function init():void{
				initTable();
				initListeners();
			}
			
			private function initTable():void {
				columnProvider = new Array();
				
				var col:DataGridColumn = new DataGridColumn("name");
				col.headerText="名称";
				col.width = 240;
				col.dataField="name";
				columnProvider.push(col);
				
				col = new DataGridColumn("icon");
				col.headerText="图标别名";
				col.dataField="icon";
				columnProvider.push(col);           
				
				col = new DataGridColumn("viewId");
				col.headerText="视图标识";
				col.dataField="viewId";
				col.editable = true;
				columnProvider.push(col); 
				
				col = new DataGridColumn("parentMenuItem");
				col.headerText = "所属功能名称";
				col.dataField = "parentMenuItemName";
				col.editable = false;
				//col.itemEditor = new MenuItemEditor("name", table);
				//col.editorDataField = "selectedItem";
				columnProvider.push(col); 
				
				col = new DataGridColumn("updatedOn");
				col.headerText="更新日期";
				col.dataField="updatedOn";
				col.editable = false;
				col.itemRenderer = new DateRendererFactory("updatedOn");
				columnProvider.push(col);             	
				
				col = new DataGridColumn("createdByName");
				col.headerText="创建者";
				col.dataField="createdByName";
				col.editable = false;
				columnProvider.push(col);             	
				
				col = new DataGridColumn("createdOn");
				col.headerText="创建日期";
				col.dataField="createdOn";
				col.editable = false;
				col.itemRenderer = new DateRendererFactory("createdOn");
				columnProvider.push(col);       
				
				table.columnProvider = columnProvider;
			}
			
			
			private function initListeners():void {
				table.addEventListener(ListEvent.ITEM_CLICK,onItemSelected);
				//For Query
				table.addEventListener(ActionTableEvent.REQUEST_DATA_QUERY,executeQuery);
				table.addEventListener(ActionTableEvent.SUBMIT_QUERY_CONDITION,executeQuery);
				
				//For Modify
				table.addEventListener(ActionTableEvent.REQUEST_DATA_MODIFY,popupModifyView);
				//table.addEventListener(ActionTableEvent.DATA_MODIFY,onLocalItemUpdate);
				
				table.addEventListener(ActionTableEvent.DATA_MODIFY_SUBMIT,executeUpdate);
				//For Create
				table.addEventListener(ActionTableEvent.DATA_CREATE,popupCreateView);
				//For Delete
				table.addEventListener(ActionTableEvent.DATA_DELETE,executeDelete);
				
				//For Create, Modify, Delete
				server.addEventListener(FaultEvent.FAULT,onFault);
				server.addEventListener(ResultEvent.RESULT,onSuccess);
				//server.addEventListener(ResultEvent.RESULT,onFetch);
				
				
			}
			
			//////////////////////////////////////////////////////
			////
			//// Event Handlers
			//// 
			//////////////////////////////////////////////////////			
			private function onItemSelected(event:ListEvent):void{
				trace("Item Selected");
			}
			
			//////////////////////////////////////////////////////
			//// Event Handlers : Query Handlers
			//////////////////////////////////////////////////////		
			private function executeQuery(event:ActionTableEvent):void{
				resultToken = server.findAllMenuItem();
				lastRPCType = QUERY;
			}
			
			//////////////////////////////////////////////////////
			//// Event Handlers : Create Handlers
			//////////////////////////////////////////////////////	
			private function popupCreateView(event:ActionTableEvent):void{
				createForm.reset();
				if (null == list) {
					executeQuery(null);
				}
				PopUpManager.addPopUp(createForm as IFlexDisplayObject, this as DisplayObject, true);
				PopUpManager.centerPopUp(createForm);
				createForm.createButton.addEventListener(FlexEvent.BUTTON_DOWN,onCreate);
				createForm.createAndCloseButton.addEventListener(FlexEvent.BUTTON_DOWN,onCreateAndClose);
				createForm.closeButton.addEventListener(FlexEvent.BUTTON_DOWN,onCreateClose);
			}
			
			private function onCreate(event:FlexEvent):void{
				createMenuItem();
			}
			private function onCreateAndClose(event:FlexEvent):void{
				createMenuItem();
				PopUpManager.removePopUp(createForm);
			}
			
			private function onCreateClose(event:FlexEvent):void{
				PopUpManager.removePopUp(createForm);
			}
			
			private function createMenuItem() : void {
				var newMenuItem:MenuItemTO = new MenuItemTO();
				newMenuItem.name = this.createForm.menuItemNameInput.text;
				newMenuItem.icon = this.createForm.iconAliasInput.text;
				newMenuItem.viewId = this.createForm.viewIdInput.text;
				if ( 0 <= this.createForm.parentComboBox.selectedIndex) {
					var parent : MenuItemTO = this.createForm.parentComboBox.selectedItem as MenuItemTO;
				    newMenuItem.parentMenuItemId = parent.id;
				} else {
					newMenuItem.parentMenuItemId = null;
				}
				
				this.resultToken = server.createMenuItem(newMenuItem);
				this.lastRPCType = CREATE;
			}
			
			//////////////////////////////////////////////////////
			//// Event Handlers : Delete Handlers
			//////////////////////////////////////////////////////	
			private function executeDelete(event:ActionTableEvent):void{
				trace(event.getDeletedData());
				var menuItems:Array = event.getDeletedData();
				if(menuItems == null || menuItems.length <= 0){
					return;
				}
				var task:Array = new Array(menuItems.length);
				for(var i:int = 0; i < menuItems.length; i ++){
					task[i] = menuItems[i].id;
				}
				resultToken = server.removeMenuItems(task);
				lastRPCType = DELETE;
			}
			
			//////////////////////////////////////////////////////
			//// Event Handlers : Update Handlers
			//////////////////////////////////////////////////////	
			private function popupModifyView(event:ActionTableEvent):void {
				if (null == event.getRequestModifyData()) {
					return ;
				}
				updateForm.reset();
				PopUpManager.addPopUp(updateForm as IFlexDisplayObject, this as DisplayObject, true);
				PopUpManager.centerPopUp(updateForm);
				updateForm.setMenuItem(event.getRequestModifyData() as MenuItemTO);
				updateForm.updateButton.addEventListener(FlexEvent.BUTTON_DOWN,onUpdate);
				updateForm.updateAndCloseButton.addEventListener(FlexEvent.BUTTON_DOWN,onUpdateAndClose);
				updateForm.closeButton.addEventListener(FlexEvent.BUTTON_DOWN,onUpdateClose);
				table.updateItem(event.getRequestModifyData() as MenuItemTO, event.getRequestModifyRowIndex());
				trace(event);
			}
		
			private function onUpdate(event:FlexEvent):void{
				updateMenuItem();
			}
			
			private function onUpdateAndClose(event:FlexEvent):void{
				updateMenuItem();
				PopUpManager.removePopUp(updateForm);
			}
			
			private function updateMenuItem() : void {
//				var newMenuItem:MenuItemTO = new MenuItemTO();
//				newMenuItem.name = this.createForm.menuItemNameInput.text;
//				newMenuItem.icon = this.createForm.iconAliasInput.text;
//				newMenuItem.viewId = this.createForm.viewIdInput.text;
//				if ( 0 <= this.createForm.parentComboBox.selectedIndex) {
//					var parent : MenuItemTO = this.createForm.parentComboBox.selectedItem as MenuItemTO;
//					newMenuItem.parentMenuItemId = parent.id;
//				} else {
//					newMenuItem.parentMenuItemId = null;
//				}
//				
//				this.resultToken = server.simpleUpdateMenuItem(newMenuItem);
//				this.lastRPCType = CREATE;
			}
			private function onUpdateClose(event:FlexEvent):void{
				PopUpManager.removePopUp(updateForm);
			}	
			
			private function executeUpdate(event:ActionTableEvent):void {
				var modified:Array = event.getSubmitingData();
				if(!modified || modified.length <= 0){
					return;
				}
				var submitData:Array = new Array();
				for(var i:int = 0; i < modified.length; i ++){
					if(!modified[i]){
						continue;
					}
					var item:MenuItemTO = new MenuItemTO();
					item.id = (modified[i] as MenuItemTO).id;
					item.name = (modified[i] as MenuItemTO).name;
					item.icon = (modified[i] as MenuItemTO).icon;
					item.viewId = (modified[i] as MenuItemTO).viewId;
					item.parentMenuItemId = (modified[i] as MenuItemTO).parentMenuItemId;
					submitData[submitData.length] = item;
				}
				resultToken = server.simpleUpdateMenuItems(submitData);
				lastRPCType = UPDATE;
			}
			
			//////////////////////////////////////////////////////
			//// Event Handlers : RPC Handlers
			//////////////////////////////////////////////////////	
			private function onFault(event:FaultEvent):void {
				trace(event);
				Alert.show(event.fault.faultString, "Error");
				initDataModel();
			}
			
			private function initDataModel():void {
				server.findAllMenuItem();
			}      
			
			private function onSuccess(event:ResultEvent):void {
				if((!resultToken)||(!resultToken.message)||(!resultToken.message.body)){
					return;
				}
				if (QUERY == lastRPCType) {
					onFetch(event);
					return;
				}
				var body:Array = resultToken.message.body as Array;
				if(lastRPCType == CREATE){
					if(null != resultToken.result){
						resultToken = server.findMenuItemById(resultToken.result);
						lastRPCType = QUERY;
					} else {
						lastRPCType = INVALID;
					}
				} else {
					lastRPCType = INVALID;
				}
			}
			
			private function onFetch(event:ResultEvent):void{
				if (event.result is ArrayCollection) {
					list = ArrayCollection(event.result).toArray();
					table.model = list;
				} else {
					table.submitCreateData(event.result);
				}
			}
			
			//////////////////////////////////////////////////////
			//// Methods : Override Methods
			//////////////////////////////////////////////////////	
			public override function reset():void{
				table.reset();
			}            
		]]>
	</mx:Script>
	
	<mx:RemoteObject id="server" destination="UI"/>
	<mx:Panel width="100%" height="100%" fontSize="12" layout="vertical" title="功能项视图">
		<components:ActionTable id="table"/>
	</mx:Panel>
</framework:ManagedView>

