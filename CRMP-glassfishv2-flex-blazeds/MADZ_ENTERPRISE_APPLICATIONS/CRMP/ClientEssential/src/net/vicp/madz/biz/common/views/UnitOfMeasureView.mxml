<?xml version="1.0" encoding="utf-8"?>
<framework:ManagedView xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:components="net.vicp.madz.components.*"
					   xmlns:framework="net.vicp.madz.framework.views.*" layout="vertical" width="100%" height="100%"  creationComplete="init();">
	<mx:Script>
		<![CDATA[
			import mx.collections.*;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.IFlexDisplayObject;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import net.vicp.madz.biz.common.vo.UnitOfMeasureCTO;
			import net.vicp.madz.biz.common.vo.UnitOfMeasureQTO;
			import net.vicp.madz.biz.common.vo.UnitOfMeasureUTO;
			import net.vicp.madz.components.events.ActionTableEvent;		
			import net.vicp.madz.components.renderer.DateRendererFactory;
			
			//////////////////////////////////////////////////////
			////
			//// Fields 
			////
			//////////////////////////////////////////////////////
			private static const INVALID:int = -1;
			private static const QUERY:int = 0;
			private static const CREATE:int = 1;
			private static const UPDATE:int = 2;
			private static const DELETE:int = 3;
			
			private var queryForm:UnitOfMeasureQueryDialog;
			private var createForm:UnitOfMeasureCreateDialog;
			
			[Bindable]
			public var uomList:Array;
			[Bindable]
			private var uomColumnProvider:Array;
			private var resultToken:AsyncToken;
			private var lastRPCType:int;
			//////////////////////////////////////////////////////
			////
			//// Methods 
			//// 
			//////////////////////////////////////////////////////
			
			//////////////////////////////////////////////////////
			//// Methods : initialize 
			//////////////////////////////////////////////////////
			private function init():void{
				initUomTable();
				initListeners();
			}
			
			private function initUomTable():void {
				uomColumnProvider = new Array();
				
				var col:DataGridColumn = new DataGridColumn("name");
				col.headerText="名称";
				col.width = 240;
				col.dataField="name";
				uomColumnProvider.push(col);
				
				col = new DataGridColumn("description");
				col.headerText="描述";
				col.dataField="description";
				uomColumnProvider.push(col);           
				
				col = new DataGridColumn("updatedBy");
				col.headerText="更新者";
				col.dataField="updatedBy";
				col.editable = false;
				uomColumnProvider.push(col); 
				
				col = new DataGridColumn("updatedOn");
				col.headerText="更新日期";
				col.dataField="updatedOn";
				col.editable = false;
				col.itemRenderer = new DateRendererFactory("updatedOn");
				uomColumnProvider.push(col);             	
				
				col = new DataGridColumn("createdBy");
				col.headerText="创建者";
				col.dataField="createdBy";
				col.editable = false;
				uomColumnProvider.push(col);             	
				
				col = new DataGridColumn("createdOn");
				col.headerText="创建日期";
				col.dataField="createdOn";
				col.editable = false;
				col.itemRenderer = new DateRendererFactory("createdOn");
				uomColumnProvider.push(col);       
				
				uomTable.columnProvider = uomColumnProvider;
			}
			
			
			private function initListeners():void {
				uomTable.addEventListener(ListEvent.ITEM_CLICK,onItemSelected);
				//For Query
				uomTable.addEventListener(ActionTableEvent.REQUEST_DATA_QUERY,popupQueryView);
				uomTable.addEventListener(ActionTableEvent.SUBMIT_QUERY_CONDITION,executeQuery);
				//For Modify
				uomTable.addEventListener(ActionTableEvent.REQUEST_DATA_MODIFY,popupModifyView);
				uomTable.addEventListener(ActionTableEvent.DATA_MODIFY_SUBMIT,executeUpdate);
				//For Create
				uomTable.addEventListener(ActionTableEvent.DATA_CREATE,popupCreateView);
				//For Delete
				uomTable.addEventListener(ActionTableEvent.DATA_DELETE,executeDelete);
				
				//For Create, Modify, Delete
				commonObject.addEventListener(FaultEvent.FAULT,onFault);
				commonObject.addEventListener(ResultEvent.RESULT,onSuccess);
				
				//For Query
				commonObjectQuery.addEventListener(ResultEvent.RESULT,onUomFetch);
				commonObjectQuery.addEventListener(FaultEvent.FAULT,onUomFault);
				
			}
			
			//////////////////////////////////////////////////////
			////
			//// Event Handlers
			//// 
			//////////////////////////////////////////////////////			
			private function onItemSelected(event:ListEvent):void{
				trace("Item Selected");
			}
			
			//////////////////////////////////////////////////////
			//// Event Handlers : Query Handlers
			//////////////////////////////////////////////////////		
			private function popupQueryView(event:ActionTableEvent):void{
				if(queryForm == null){
					queryForm = new UnitOfMeasureQueryDialog();
				}else{
					queryForm.reset();
				}
				PopUpManager.addPopUp(queryForm as IFlexDisplayObject, this as DisplayObject, true);
				PopUpManager.centerPopUp(queryForm);
				queryForm.queryButton.addEventListener(FlexEvent.BUTTON_DOWN,onQuery);
				queryForm.closeBtn.addEventListener(FlexEvent.BUTTON_DOWN,onQueryClose);
			}
			
			private function onQuery(event:FlexEvent):void {
				uomTable.submitQueryCondition(queryForm.deletedCheckBox.selected);
			}
			
			private function onQueryClose(event:FlexEvent):void {
				PopUpManager.removePopUp(queryForm);
			}
			
			private function executeQuery(event:ActionTableEvent):void{
				var deleted:Boolean =  Boolean(event.getQueryCondition());
				commonObjectQuery.findUnitOfMeasure(deleted);
				PopUpManager.removePopUp(queryForm);
			}
			
			//////////////////////////////////////////////////////
			//// Event Handlers : Create Handlers
			//////////////////////////////////////////////////////	
			private function popupCreateView(event:ActionTableEvent):void{
				if(createForm == null){
					createForm = new UnitOfMeasureCreateDialog();
				}else{
					createForm.reset();
				}
				PopUpManager.addPopUp(createForm as IFlexDisplayObject, this as DisplayObject, true);
				PopUpManager.centerPopUp(createForm);
				createForm.createButton.addEventListener(FlexEvent.BUTTON_DOWN,onCreate);
				createForm.createAndCloseButton.addEventListener(FlexEvent.BUTTON_DOWN,onCreateAndClose);
				createForm.closeBtn.addEventListener(FlexEvent.BUTTON_DOWN,onCreateClose);
			}
			
			private function onCreate(event:FlexEvent):void{
				createUom();
			}
			private function onCreateAndClose(event:FlexEvent):void{
				createUom();
				PopUpManager.removePopUp(createForm);
			}
			
			private function onCreateClose(event:FlexEvent):void{
				PopUpManager.removePopUp(createForm);
			}
			
			private function createUom() : void {
				var newUom:UnitOfMeasureCTO = new UnitOfMeasureCTO();
				newUom.name = this.createForm.nameInput.text;
				newUom.description = this.createForm.descriptionTextArea.text;
				
				this.resultToken = commonObject.createUnitOfMeasure(newUom);
				this.lastRPCType = CREATE;
			}
			
			//////////////////////////////////////////////////////
			//// Event Handlers : Delete Handlers
			//////////////////////////////////////////////////////	
			private function executeDelete(event:ActionTableEvent):void{
				trace(event.getDeletedData());
				var uoms:Array = event.getDeletedData();
				if(uoms == null || uoms.length <= 0){
					return;
				}
				var task:Array = new Array(uoms.length);
				for(var i:int = 0; i < uoms.length; i ++){
					task[i] = uoms[i].id;
				}
				resultToken = commonObject.removeUnitOfMeasure(task);
				lastRPCType = DELETE;
			}
			
			//////////////////////////////////////////////////////
			//// Event Handlers : Update Handlers
			//////////////////////////////////////////////////////	
			private function popupModifyView(event:ActionTableEvent):void {
				trace(event);
			}
			
			private function executeUpdate(event:ActionTableEvent):void {
				var modified:Array = event.getSubmitingData();
				if(!modified || modified.length <= 0){
					return;
				}
				var submitData:Array = new Array();
				for(var i:int = 0; i < modified.length; i ++){
					if(!modified[i]){
						continue;
					}
					var uto:UnitOfMeasureUTO = new UnitOfMeasureUTO();
					uto.id = UnitOfMeasureQTO(modified[i]).id;
					uto.name = UnitOfMeasureQTO(modified[i]).name;
					uto.description = UnitOfMeasureQTO(modified[i]).description;
					submitData[submitData.length] = uto;
				}
				resultToken = commonObject.updateUnitOfMeasure(submitData);
				lastRPCType = UPDATE;
			}
			
			//////////////////////////////////////////////////////
			//// Event Handlers : RPC Handlers
			//////////////////////////////////////////////////////	
			private function onFault(event:FaultEvent):void {
				trace(event);
				Alert.show(event.fault.faultString, "Error");
				initDataModel();
			}
			
			private function initDataModel():void {
				commonObjectQuery.findUnitOfMeasure(false);
			}      
			
			private function onSuccess(event:ResultEvent):void {
				if((!resultToken)||(!resultToken.message)||(!resultToken.message.body)){
					return;
				}
				var body:Array = resultToken.message.body as Array;
				if(lastRPCType == CREATE){
					if(null != resultToken.result){
					    resultToken = commonObjectQuery.findUnitOfMeasureById(resultToken.result);
				        lastRPCType = QUERY;
					} else {
				        lastRPCType = INVALID;
					}
				} else {
				    lastRPCType = INVALID;
				}
			}
			
			private function onUomFetch(event:ResultEvent):void{
				if (event.result is ArrayCollection) {
				    uomList = ArrayCollection(event.result).toArray();
				    uomTable.model = uomList;
				} else {
					uomTable.submitCreateData(event.result);
				}
			}
			
			private function onUomFault(event:FaultEvent):void{
				trace(event.fault.toString());
				Alert.show(event.fault.toString());
			}
			
			//////////////////////////////////////////////////////
			//// Methods : Override Methods
			//////////////////////////////////////////////////////	
			public override function reset():void{
				uomTable.reset();
			}            
		]]>
	</mx:Script>
	
	<mx:RemoteObject id="commonObjectQuery" destination="CommonObjectQuery"/>
	<mx:RemoteObject id="commonObject" destination="CommonObject"/>
	<mx:Panel width="100%" height="100%" fontSize="12" layout="vertical" title="计量单位视图">
		<components:ActionTable id="uomTable"/>
	</mx:Panel>
</framework:ManagedView>

